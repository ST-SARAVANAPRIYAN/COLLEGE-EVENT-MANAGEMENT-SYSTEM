from flask import Blueprint, request, jsonify, session, render_template, redirect, url_for, flash, current_app
from models.models import db, Registration, User, Event, Notification
from utils.email_service import send_email
from werkzeug.utils import secure_filename
import uuid
import json
import os
from datetime import datetime

payment_bp = Blueprint('payment', 'payment')

# Razorpay configuration (replace with actual API keys in production)
RAZORPAY_KEY_ID = 'rzp_test_Zh'
RAZORPAY_KEY_SECRET = 'e6CZKCMIMhTsg3kudgp9dhPh'

# Uncomment below to use actual Razorpay integration
# import razorpay
# client = razorpay.Client(auth=(RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET))

@payment_bp.route('/api/payments/verify', methods=['POST'])
def verify_payment():
    try:
        data = request.get_json()
        payment_id = data.get('payment_id')
        registration_id = data.get('registration_id')
        
        # In production, verify with Razorpay
        # For demo, assume payment is successful
        
        # Update registration
        registration = Registration.query.get(registration_id)
        if registration:
            registration.payment_id = payment_id
            registration.payment_status = 'completed'
            db.session.commit()
            
            # Send confirmation email
            user = User.query.get(registration.user_id)
            event = Event.query.get(registration.event_id)
            
            if user and event:
                send_email(
                    user.email,
                    f"Payment Confirmation: {event.name}",
                    f"Hi {user.name},\n\nYour payment for {event.name} has been received. Your registration is now confirmed.\n\nPayment ID: {payment_id}\nAmount: â‚¹{event.fee}\n\nRegards,\nCEMS Team"
                )
            return jsonify({"success": True, "message": "Payment verified successfully"})
        else:
            return jsonify({"error": "Registration not found"}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@payment_bp.route('/submit_transaction_id/<int:registration_id>', methods=['POST'])
def submit_transaction_id(registration_id):
    """
    Handle the submission of UPI transaction ID by participants
    Changes registration status to 'verification_pending'
    """
    try:
        # Check if user is logged in
        if 'user_id' not in session:
            flash('Please log in to submit transaction details', 'danger')
            return redirect(url_for('auth.login'))
        
        # Get the registration
        registration = Registration.query.get_or_404(registration_id)
        
        # Check if this is the user's registration
        if registration.user_id != session.get('user_id'):
            flash('You are not authorized to submit transaction details for this registration', 'danger')
            return redirect(url_for('participant.dashboard'))
        
        # Check if registration is in pending state
        if registration.payment_status != 'pending':
            flash('Your payment has already been processed or is being verified', 'info')
            return redirect(url_for('payment.process', registration_id=registration_id))
        
        # Get form data
        transaction_id = request.form.get('transaction_id')
        transaction_notes = request.form.get('transaction_notes', '')
        
        # Validate transaction ID
        if not transaction_id or len(transaction_id) < 5:
            flash('Please enter a valid transaction ID from your UPI payment app', 'danger')
            return redirect(url_for('payment.process', registration_id=registration_id))
        
        # Handle screenshot upload if provided
        screenshot_path = None
        if 'transaction_screenshot' in request.files:
            screenshot = request.files['transaction_screenshot']
            if screenshot and screenshot.filename:
                filename = secure_filename(f"{registration_id}_{uuid.uuid4().hex[:8]}_{screenshot.filename}")
                upload_dir = os.path.join(current_app.root_path, 'static', 'uploads', 'payment_screenshots')
                
                # Make sure directory exists
                if not os.path.exists(upload_dir):
                    os.makedirs(upload_dir)
                
                screenshot_path = os.path.join(upload_dir, filename)
                screenshot.save(screenshot_path)
                screenshot_relative_path = f"/static/uploads/payment_screenshots/{filename}"
                
                # Save screenshot path as part of transaction notes
                if transaction_notes:
                    transaction_notes += f"\n\nScreenshot: {screenshot_relative_path}"
                else:
                    transaction_notes = f"Screenshot: {screenshot_relative_path}"
        
        # Update registration
        registration.payment_id = transaction_id
        registration.payment_status = 'verification_pending'
        registration.payment_method = 'upi'
        registration.verification_notes = transaction_notes
        db.session.commit()
        
        # Create a notification for the organizer
        event = Event.query.get(registration.event_id)
        if event:
            organiser_id = event.organiser_id if event.organiser_id else event.created_by
            if organiser_id:
                notification = Notification(
                    message=f"New payment verification request for {event.name}. Transaction ID: {transaction_id}",
                    created_by=session.get('user_id'),
                    user_id=organiser_id,
                    is_important=True
                )
                db.session.add(notification)
                db.session.commit()
        
        flash('Your transaction details have been submitted for verification. You will be notified once verified.', 'success')
        return redirect(url_for('payment.process', registration_id=registration_id))
        
    except Exception as e:
        flash(f'Error submitting transaction details: {str(e)}', 'danger')
        return redirect(url_for('payment.process', registration_id=registration_id))

@payment_bp.route('/process/<int:registration_id>')
def process(registration_id):
    """
    Display payment page for a paid registration
    """
    try:
        # Get registration
        registration = Registration.query.get_or_404(registration_id)
        
        # Verify this is the user's registration
        if registration.user_id != session.get('user_id'):
            flash('Unauthorized access to payment', 'danger')
            return redirect(url_for('participant.dashboard'))
          # Get event details
        event = Event.query.get(registration.event_id)
        if not event:
            flash('Event not found', 'danger')
            return redirect(url_for('participant.dashboard'))
          # Get organiser UPI ID - check both organiser_id and created_by fields
        organiser_id = event.organiser_id if event.organiser_id else event.created_by
        print(f"Debug - Event ID: {event.id}, Organiser ID: {organiser_id}")
        
        organiser = User.query.get(organiser_id) if organiser_id else None
        upi_id = None
        
        if organiser:
            print(f"Debug - Organiser found: {organiser.name}, has_upi_attr: {hasattr(organiser, 'upi_id')}, upi_id: {organiser.upi_id}")
            if hasattr(organiser, 'upi_id') and organiser.upi_id:
                # Check if UPI ID is valid (basic check)
                if '@' in organiser.upi_id and len(organiser.upi_id) > 3:
                    upi_id = organiser.upi_id
                    print(f"Debug - Valid UPI ID found: {upi_id}")
                else:
                    print(f"Debug - Invalid UPI ID format: {organiser.upi_id}")
            else:
                print("Debug - No UPI ID set for organiser")
        else:
            print("Debug - No organiser found for this event")
        
        # Create payment data
        payment_data = {
            'amount': int(event.price * 100),  # Convert to paisa/cents
            'currency': 'INR',
            'receipt': f'reg_{registration.id}',
            'payment_capture': 1,
            'notes': {
                'registration_id': registration.id,
                'event_name': event.name,
                'user_email': registration.user.email
            }
        }
        
        # In production, create an order with Razorpay
        # order = client.order.create(payment_data)
        # order_id = order['id']
        
        # For demo purposes
        order_id = f"order_{uuid.uuid4().hex[:8]}"
        
        # Render payment page
        return render_template(
            'payment.html',
            registration=registration,
            event=event,
            organiser=organiser,
            upi_id=upi_id,
            razorpay_key_id=RAZORPAY_KEY_ID,
            order_id=order_id,
            amount=event.price * 100,  # in paisa/cents
            currency='INR',
            user_name=registration.user.name,
            user_email=registration.user.email,
            user_phone=registration.user.contact_number or ''
        )    
    except Exception as e:
        flash(f'Error processing payment: {str(e)}', 'danger')
        return redirect(url_for('participant.dashboard'))
        
@payment_bp.route('/payment/success')
def payment_success():
    """
    Handle successful payments
    """
    registration_id = request.args.get('registration_id')
    payment_method = request.args.get('payment_method', 'razorpay')
    
    if not registration_id:
        flash('Invalid payment confirmation', 'danger')
        return redirect(url_for('participant.dashboard'))
        
    try:
        registration = Registration.query.get(registration_id)
        if not registration:
            flash('Registration not found', 'danger')
            return redirect(url_for('participant.dashboard'))
            
        # Update payment status
        registration.payment_status = 'completed'
        # Add payment method to registration
        registration.payment_method = payment_method
        # Add a payment ID for UPI payments (if not already present)
        if not registration.payment_id and payment_method == 'upi':
            registration.payment_id = f"upi_{uuid.uuid4().hex[:8]}"
        db.session.commit()
        
        # Send confirmation email
        user = User.query.get(registration.user_id)
        event = Event.query.get(registration.event_id)
        
        if user and event:
            send_email(
                user.email,
                f"Registration Confirmed: {event.name}",
                f"""Hi {user.name},

Your payment for {event.name} has been received and your registration is now confirmed.

Event Details:
- Date: {event.start_date.strftime('%Y-%m-%d') if event.start_date else event.date}
- Time: {event.start_time or 'TBA'}
- Venue: {event.venue or 'TBA'}

Thank you for registering!

Regards,
CEMS Team"""
            )
        
        flash('Payment completed successfully! Your registration is confirmed.', 'success')
        return redirect(url_for('participant.dashboard'))
    except Exception as e:
        flash(f'Error processing payment confirmation: {str(e)}', 'danger')
        return redirect(url_for('participant.dashboard'))

@payment_bp.route('/api/payments/check_upi_status/<int:registration_id>', methods=['GET'])
def check_upi_status(registration_id):
    """
    Check if a UPI payment has been received for the given registration.
    In a production environment, this would integrate with UPI payment gateway APIs or webhooks.
    For this implementation, we're simulating the verification process.
    """
    try:
        registration = Registration.query.get_or_404(registration_id)
        
        # Check if payment is already completed
        if registration.payment_status == 'completed':            # Use registration directly instead of querying for a transaction
            if registration.payment_status == 'completed':
                # Update registration with transaction data if needed
                event = Event.query.get(registration.event_id)
                
                if not registration.transaction_timestamp:
                    registration.transaction_timestamp = datetime.utcnow()
                    
                if not registration.amount and event:
                    registration.amount = event.price
                    
                if not registration.payee_name and registration.user:
                    registration.payee_name = registration.user.name
                      if not registration.additional_data:
                    registration.additional_data = json.dumps({
                        'event_id': event.id if event else None,
                        'event_name': event.name if event else 'Unknown Event'
                    })
                
                # Update the registration
                db.session.commit()
            
            return jsonify({
                'success': True,
                'transaction_id': registration.payment_id,
                'timestamp': registration.transaction_timestamp.strftime("%Y-%m-%d %H:%M:%S"),
                'amount': registration.amount,
                'payee_name': registration.payee_name
            })
        
        # In a real implementation, you would check with your payment provider's API
        # to verify if a payment has been made matching this registration's details
          # In a real-world implementation, this is where you would integrate with a payment gateway or bank API
        # to check if a payment has been made for this registration
        
        # For now, we'll disable the automatic verification since we don't have a real payment gateway
        # This ensures payments are not falsely marked as successful
        
        # IMPORTANT: When implementing a real payment gateway, replace this section with actual API calls
        # to verify payments from your payment provider
        
        # Example code for a real implementation (commented out):
        # response = payment_gateway_api.verify_transaction(
        #     reference_id=f"EVENT{registration.event_id}REG{registration.id}",
        #     upi_id=organiser.upi_id
        # )
        # if response.status == "SUCCESS":
        #    # Update registration status
        #    registration.payment_status = 'completed'
        #    # Rest of the code...
        
        # For now, no automatic verification happens without manual confirmation or real payment gateway
        if False:  # Always false - replace with real verification logic when available
            # Update registration status
            registration.payment_status = 'completed'
            registration.payment_method = 'upi'
            if not registration.payment_id:
                registration.payment_id = f"upi_{uuid.uuid4().hex[:8]}"
              # Update registration with transaction data
            event = Event.query.get(registration.event_id)
            
            # Add transaction data directly to registration
            registration.amount = event.price if event else 0.0
            registration.transaction_timestamp = datetime.utcnow()
            registration.payee_name = registration.user.name if registration.user else 'Unknown'
            registration.additional_data = json.dumps({
                'event_id': event.id if event else None,
                'event_name': event.name if event else 'Unknown Event'
            })
            # Update registration
            db.session.commit()
            
            # Send confirmation email
            user = User.query.get(registration.user_id)
            event = Event.query.get(registration.event_id)
            
            if user and event:
                send_email(
                    user.email,
                    f"Registration Confirmed: {event.name}",
                    f"""Hi {user.name},

Your payment for {event.name} has been received and your registration is now confirmed.

Payment Details:
- Transaction ID: {registration.payment_id}
- Amount: â‚¹{event.price}
- Method: UPI
- Date: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}

Event Details:
- Date: {event.start_date.strftime('%Y-%m-%d') if event.start_date else event.date}
- Time: {event.start_time or 'TBA'}
- Venue: {event.venue or 'TBA'}

Thank you for registering!

Regards,
CEMS Team"""
                )
            
            return jsonify({
                'success': True,
                'transaction_id': registration.payment_id,
                'timestamp': registration.transaction_timestamp.strftime("%Y-%m-%d %H:%M:%S"),
                'amount': registration.amount,
                'payee_name': registration.payee_name
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Payment not yet detected'
            })
    
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@payment_bp.route('/setup_upi/<int:event_id>', methods=['GET', 'POST'])
def setup_upi(event_id):
    """
    Let organizers set up their UPI ID directly from the payment page.
    This is a convenience function to make it easier for organizers to enable UPI payments.
    """
    # Check if user is logged in
    if 'user_id' not in session:
        flash('Please log in to set up UPI payments.', 'danger')
        return redirect(url_for('auth.login'))
    
    # Get the event
    event = Event.query.get_or_404(event_id)
    
    # Check if the user is the event organizer
    if event.created_by != session.get('user_id') and event.organiser_id != session.get('user_id'):
        flash('You are not authorized to set up UPI payments for this event.', 'danger')
        return redirect(url_for('event.event_detail', event_id=event_id))
    
    # Get the organizer
    user = User.query.get(session.get('user_id'))
    
    if request.method == 'POST':
        upi_id = request.form.get('upi_id')
        
        # Validate UPI ID format
        if not upi_id or '@' not in upi_id or len(upi_id) <= 3:
            flash('Please enter a valid UPI ID in the format username@bankname', 'danger')
            return redirect(url_for('payment.setup_upi', event_id=event_id))
        
        # Update the organizer's UPI ID
        user.upi_id = upi_id
        db.session.commit()
        
        flash('UPI ID has been set up successfully. UPI payments are now enabled for your events.', 'success')
        return redirect(url_for('event.event_detail', event_id=event_id))
    
    return render_template(
        'setup_upi.html',
        event=event,
        user=user
    )

@payment_bp.route('/verify_upi_payment/<int:registration_id>', methods=['GET', 'POST'])
@payment_bp.route('/verify_upi_payment', methods=['POST'])
def verify_upi_payment(registration_id=None):
    """
    Allow organizers to manually verify UPI payments.
    GET - Show the verification form
    POST - Process verification (approve/reject)
    After verification, organizer will be redirected to the transactions page
    """
    try:
        # Check if user is logged in
        if 'user_id' not in session:
            flash('Please log in to verify payments', 'danger')
            return redirect(url_for('auth.login'))
        
        # Get current user
        current_user_id = session.get('user_id')
        current_user = User.query.get(current_user_id)
        
        # Only organizers and admins can verify payments
        if current_user.role not in ['organiser', 'admin']:
            flash('You do not have permission to verify payments', 'danger')
            return redirect(url_for('participant.dashboard'))
        
        # Handle POST request with form data
        if request.method == 'POST':
            # Get registration ID from form if not provided in URL
            if not registration_id:
                registration_id = request.form.get('registration_id')
            
            if not registration_id:
                flash('Missing registration information', 'danger')
                return redirect(url_for('organiser.dashboard'))
            
            registration = Registration.query.get_or_404(registration_id)
            
            # Check if organizer is authorized for this event
            event = Event.query.get(registration.event_id)
            if not event:
                flash('Event not found', 'danger')
                return redirect(url_for('organiser.dashboard'))
                
            if (event.created_by != current_user_id and 
                event.organiser_id != current_user_id and 
                current_user.role != 'admin'):
                flash('You are not authorized to verify payments for this event', 'danger')
                return redirect(url_for('organiser.dashboard'))
            
            # Get verification decision and notes
            action = request.form.get('action', 'verify')  # 'verify' or 'reject'
            verification_notes = request.form.get('verification_notes', '')
            
            # Update registration based on action
            if action == 'verify':
                registration.payment_status = 'completed'
                registration.verification_date = datetime.utcnow()
                registration.verified_by = current_user_id
                
                # Create transaction record
                # Update registration with transaction data
                registration.amount = event.price
                registration.transaction_timestamp = datetime.utcnow()
                registration.payee_name = registration.user.name
                registration.additional_data = json.dumps({
                    'event_id': event.id,
                    'event_name': event.name,
                    'verified_by': current_user.name,
                    'verified_by_id': current_user_id
                })
                # No need to add registration again, just update it
                
                success_message = 'Payment verified successfully'
                notification_message = f"Your payment for {event.name} has been verified. You can now download your ticket."
            else:  # rejection
                registration.payment_status = 'rejected'
                registration.verification_date = datetime.utcnow()
                registration.verified_by = current_user_id
                
                success_message = 'Payment rejected'
                notification_message = f"Your payment for {event.name} has been rejected: {verification_notes}"
            
            # Add verification notes if provided
            if verification_notes:
                registration.verification_notes = verification_notes
                
            db.session.commit()
            
            # Notify participant
            user = User.query.get(registration.user_id)
            if user:
                # Create notification
                notification = Notification(
                    message=notification_message,
                    created_by=current_user_id,
                    user_id=user.id,
                    is_important=True
                )
                db.session.add(notification)
                db.session.commit()
                
                # Send email notification
                email_subject = f"Payment {'Verified' if action == 'verify' else 'Rejected'}: {event.name}"
                email_body = f"""Hi {user.name},

Your payment for {event.name} has been {'verified' if action == 'verify' else 'rejected'}.

{'You can now download your ticket from your dashboard.' if action == 'verify' else f'Reason: {verification_notes}'}

Event Details:
- Date: {event.start_date.strftime('%Y-%m-%d') if event.start_date else event.date}
- Time: {event.start_time or 'TBA'}
- Venue: {event.venue or 'TBA'}

{'We look forward to seeing you at the event!' if action == 'verify' else 'If you believe this is a mistake, please contact the organizer.'}

Regards,
CEMS Team
"""                send_email(user.email, email_subject, email_body)
                
            flash(success_message, 'success')
            return redirect(url_for('organiser.payment_transactions'))
        
        # Handle GET request - show verification form
        if registration_id:
            registration = Registration.query.get_or_404(registration_id)
            event = Event.query.get(registration.event_id)
            user = User.query.get(registration.user_id)
            
            # Check if organizer is authorized for this event
            if (event.created_by != current_user_id and 
                event.organiser_id != current_user_id and 
                current_user.role != 'admin'):
                flash('You are not authorized to verify payments for this event', 'danger')
                return redirect(url_for('organiser.dashboard'))
            
            return render_template('verify_payment.html', 
                                  registration=registration,
                                  event=event,
                                  user=user)
        else:
            flash('Registration ID is required', 'danger')
            return redirect(url_for('organiser.dashboard'))
            
    except Exception as e:
        flash(f'Error verifying payment: {str(e)}', 'danger')
        return redirect(url_for('organiser.dashboard'))